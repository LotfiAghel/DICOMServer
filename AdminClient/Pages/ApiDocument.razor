@page "/api-doc"
@using System.Linq
@using Microsoft.Extensions.Logging
@using ClTool
@using MyRefelctionMirror;
@using System;
@using System.Net;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;



@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using Tools;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Collections;
@using AdminBaseComponenets.BaseComs





@foreach (var value in values){
            <Accordion title=@value.url>
         
    @foreach (var item in value.routes){
        <ApiSection item=@item baseUrl=@value.url webClient=@webClient></ApiSection>
    }
       
         
</Accordion>
}
                



@code {

    
    List<ControllerInfo> values = new List<ControllerInfo>();
    ClTool.WebClient webClient= null;
    
    object result=null;
        protected override async Task OnInitializedAsync()
    {
        await IncrementCount();
    }
    private async Task IncrementCount()
    {
        webClient = ClTool.WebClient.webClient;
        JsonSerializerSettings settings = new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
            MetadataPropertyHandling = MetadataPropertyHandling.ReadAhead,
            SerializationBinder = TypeNameSerializationBinder2.global,
            DateFormatHandling = DateFormatHandling.IsoDateFormat
        };


        var settings1 = JsonSerializer.Create(settings);
        


        var x = await webClient.fetch0<object>("meta/ref-test", null, HttpMethod.Get);
        values = x.ToObject<List<ControllerInfo>>(settings1);
        Console.WriteLine(values);
        //oldBase.fetch2
    }


    void Click()
    {

    }







}