// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newtonsoft.Json.Linq;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20251017104514_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "admin_user_role", new[] { "none", "super_user", "developer", "data_entry", "support" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Admin.AdminApiCall", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_id");

                    b.Property<string>("apiName")
                        .HasColumnType("text")
                        .HasColumnName("api_name");

                    b.Property<DateTime>("callDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("call_date");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<JToken>("data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_admin_api_calls");

                    b.HasIndex("adminId")
                        .HasDatabaseName("ix_admin_api_calls_admin_id");

                    b.ToTable("admin_api_calls", (string)null);
                });

            modelBuilder.Entity("Models.AdminUser", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("firstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("lastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int[]>("roles")
                        .HasColumnType("integer[]")
                        .HasColumnName("roles");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("id")
                        .HasName("pk_admin_users");

                    b.ToTable("admin_users", (string)null);
                });

            modelBuilder.Entity("Models.DataExtract.DataSourceJsonConvertor", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("clonedFromId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloned_from_id");

                    b.Property<JToken>("convertor")
                        .HasColumnType("jsonb")
                        .HasColumnName("convertor");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_data_source_json_convertors");

                    b.HasIndex("clonedFromId")
                        .HasDatabaseName("ix_data_source_json_convertors_cloned_from_id");

                    b.ToTable("data_source_json_convertors", (string)null);
                });

            modelBuilder.Entity("Models.DataExtract.DataSourceJsonPair", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("clonedFromId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloned_from_id");

                    b.Property<string>("cloner")
                        .HasColumnType("text")
                        .HasColumnName("cloner");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<JToken>("dst")
                        .HasColumnType("jsonb")
                        .HasColumnName("dst");

                    b.Property<List<object>>("goodFact")
                        .HasColumnType("jsonb[]")
                        .HasColumnName("good_fact");

                    b.Property<List<object>>("neverFact")
                        .HasColumnType("jsonb[]")
                        .HasColumnName("never_fact");

                    b.Property<JToken>("source")
                        .HasColumnType("jsonb")
                        .HasColumnName("source");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_data_source_json_pairs");

                    b.HasIndex("clonedFromId")
                        .HasDatabaseName("ix_data_source_json_pairs_cloned_from_id");

                    b.ToTable("data_source_json_pairs", (string)null);
                });

            modelBuilder.Entity("Models.EntityHistory<System.Guid>", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("adminId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_id");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<JToken>("data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<JToken>("dif")
                        .HasColumnType("jsonb")
                        .HasColumnName("dif");

                    b.Property<Guid>("entityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("entityName")
                        .HasColumnType("text")
                        .HasColumnName("entity_name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_history");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("Models.EntityHistory<int>", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<Guid?>("adminId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_id");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<JToken>("data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<JToken>("dif")
                        .HasColumnType("jsonb")
                        .HasColumnName("dif");

                    b.Property<int>("entityId")
                        .HasColumnType("integer")
                        .HasColumnName("entity_id");

                    b.Property<string>("entityName")
                        .HasColumnType("text")
                        .HasColumnName("entity_name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_history2");

                    b.ToTable("history2", (string)null);
                });

            modelBuilder.Entity("Models.Notifications.News", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<List<string>>("files")
                        .HasColumnType("text[]")
                        .HasColumnName("files");

                    b.Property<int>("notifType")
                        .HasColumnType("integer")
                        .HasColumnName("notif_type");

                    b.Property<int>("onAriveMethod")
                        .HasColumnType("integer")
                        .HasColumnName("on_arive_method");

                    b.Property<int[]>("platforms")
                        .HasColumnType("integer[]")
                        .HasColumnName("platforms");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("userRegisterMaxDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("user_register_max_date");

                    b.Property<DateTime>("userRegisterMinDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("user_register_min_date");

                    b.HasKey("id")
                        .HasName("pk_news");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("Models.Notifications.UserInboxItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<List<string>>("files")
                        .HasColumnType("text[]")
                        .HasColumnName("files");

                    b.Property<int>("notifType")
                        .HasColumnType("integer")
                        .HasColumnName("notif_type");

                    b.Property<int>("onAriveMethod")
                        .HasColumnType("integer")
                        .HasColumnName("on_arive_method");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_user_inbox_items");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_user_inbox_items_customer_id");

                    b.ToTable("user_inbox_items", (string)null);
                });

            modelBuilder.Entity("Models.Profile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("disease")
                        .HasColumnType("text")
                        .HasColumnName("disease");

                    b.Property<int>("level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_profiles");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Models.SendSmsHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<byte[]>("IpAddress")
                        .HasMaxLength(16)
                        .HasColumnType("bytea")
                        .HasColumnName("ip_address");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("send_time");

                    b.HasKey("id")
                        .HasName("pk_send_sms_histories");

                    b.ToTable("send_sms_histories", (string)null);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("LastSmsSend")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_sms_send");

                    b.Property<DateTime?>("ServiceBuyTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("service_buy_time");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("ServiceValidTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("service_valid_time");

                    b.Property<string>("avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("disableZarinPalBuying")
                        .HasColumnType("boolean")
                        .HasColumnName("disable_zarin_pal_buying");

                    b.Property<string>("displayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("examinerFinder")
                        .HasColumnType("uuid")
                        .HasColumnName("examiner_finder");

                    b.Property<string>("firstAndLastName")
                        .HasColumnType("text")
                        .HasColumnName("first_and_last_name");

                    b.Property<string>("pass")
                        .HasColumnType("text")
                        .HasColumnName("pass");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("registerDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("register_date");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("userType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Models.UserDetail", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<int>("MonthToExam")
                        .HasColumnType("integer")
                        .HasColumnName("month_to_exam");

                    b.Property<string>("ProfileImageBase64")
                        .HasColumnType("text")
                        .HasColumnName("profile_image_base64");

                    b.Property<int>("RequiredMark")
                        .HasColumnType("integer")
                        .HasColumnName("required_mark");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("ResultDetail")
                        .HasColumnType("text")
                        .HasColumnName("result_detail");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sur_name");

                    b.HasKey("userId")
                        .HasName("pk_user_details");

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("Models.UserExaminer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<bool>("accepted")
                        .HasColumnType("boolean")
                        .HasColumnName("accepted");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("examinerId")
                        .HasColumnType("uuid")
                        .HasColumnName("examiner_id");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("id")
                        .HasName("pk_user_examiners");

                    b.HasIndex("examinerId")
                        .HasDatabaseName("ix_user_examiners_examiner_id");

                    b.HasIndex("userId")
                        .HasDatabaseName("ix_user_examiners_user_id");

                    b.ToTable("user_examiners", (string)null);
                });

            modelBuilder.Entity("Models.UserExtraData", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<Guid>>("closedPopup")
                        .HasColumnType("uuid[]")
                        .HasColumnName("closed_popup");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<List<Guid>>("readedNews")
                        .HasColumnType("uuid[]")
                        .HasColumnName("readed_news");

                    b.Property<Dictionary<string, string>>("settings")
                        .HasColumnType("jsonb")
                        .HasColumnName("settings");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_user_extra_datas");

                    b.ToTable("user_extra_datas", (string)null);
                });

            modelBuilder.Entity("Models.UserMigrateData", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("enitityName")
                        .HasColumnType("text")
                        .HasColumnName("enitity_name");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("vrsion")
                        .HasColumnType("text")
                        .HasColumnName("vrsion");

                    b.HasKey("id")
                        .HasName("pk_users_migrate_data");

                    b.HasIndex("userId")
                        .HasDatabaseName("ix_users_migrate_data_user_id");

                    b.ToTable("users_migrate_data", (string)null);
                });

            modelBuilder.Entity("Models.VerificationCode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("advertisingId")
                        .HasColumnType("text")
                        .HasColumnName("advertising_id");

                    b.Property<int>("code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("marketId")
                        .HasColumnType("integer")
                        .HasColumnName("market_id");

                    b.Property<string>("metrixSessionId")
                        .HasColumnType("text")
                        .HasColumnName("metrix_session_id");

                    b.Property<string>("metrixUserId")
                        .HasColumnType("text")
                        .HasColumnName("metrix_user_id");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("id")
                        .HasName("pk_verification_codes");

                    b.ToTable("verification_codes", (string)null);
                });

            modelBuilder.Entity("Parbad.Storage.Abstractions.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("GatewayAccountName")
                        .HasColumnType("text")
                        .HasColumnName("gateway_account_name");

                    b.Property<string>("GatewayName")
                        .HasColumnType("text")
                        .HasColumnName("gateway_name");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<long>("TrackingNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("tracking_number");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("text")
                        .HasColumnName("transaction_code");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Parbad.Storage.Abstractions.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text")
                        .HasColumnName("additional_data");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<bool>("IsSucceed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_succeed");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Models.Admin.AdminApiCall", b =>
                {
                    b.HasOne("Models.AdminUser", "admin")
                        .WithMany()
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admin_api_calls_admin_users_admin_id");

                    b.Navigation("admin");
                });

            modelBuilder.Entity("Models.DataExtract.DataSourceJsonConvertor", b =>
                {
                    b.HasOne("Models.DataExtract.DataSourceJsonPair", "clonedFrom")
                        .WithMany("convertors")
                        .HasForeignKey("clonedFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_data_source_json_convertors_data_source_json_pairs_cloned_f");

                    b.Navigation("clonedFrom");
                });

            modelBuilder.Entity("Models.DataExtract.DataSourceJsonPair", b =>
                {
                    b.HasOne("Models.DataExtract.DataSourceJsonPair", "clonedFrom")
                        .WithMany()
                        .HasForeignKey("clonedFromId")
                        .HasConstraintName("fk_data_source_json_pairs_data_source_json_pairs_cloned_from_id");

                    b.Navigation("clonedFrom");
                });

            modelBuilder.Entity("Models.Notifications.UserInboxItem", b =>
                {
                    b.HasOne("Models.User", "Customer")
                        .WithMany("userInboxItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inbox_items_users_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.UserExaminer", b =>
                {
                    b.HasOne("Models.User", "examiner")
                        .WithMany("clients")
                        .HasForeignKey("examinerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_examiners_users_examiner_id");

                    b.HasOne("Models.User", "user")
                        .WithMany("examiners")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_examiners_users_user_id");

                    b.Navigation("examiner");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.UserMigrateData", b =>
                {
                    b.HasOne("Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_migrate_data_users_user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.DataExtract.DataSourceJsonPair", b =>
                {
                    b.Navigation("convertors");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("clients");

                    b.Navigation("examiners");

                    b.Navigation("userInboxItems");
                });
#pragma warning restore 612, 618
        }
    }
}
