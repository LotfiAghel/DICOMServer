// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;


namespace Models
{
    class Sort : IQuery<SendSmsHistory>
    {
        public IQueryable<SendSmsHistory> run(IQueryable<SendSmsHistory> q)
        {
            return q.OrderByDescending(x => x.SendTime);
        }
        public static IQueryable<SendSmsHistory> run2(IQueryable<SendSmsHistory> q)
        {
            return q.OrderByDescending(x => x.SendTime);
        }
    }
   
    public abstract class AEntity : IEntity//IEntity3<int>
    {
        [Key]
        [PersianLabel("شناسه")]
        [Models.IgnoreDefultForm]
        public int id { get; set; }

        //public Guid ?cid { get; set; }

        [JsonIgnore]
        [NotMapped]
        public ChangeEventList onChanges { get; set; }
        
        
        public IQueryable<EntityHistory<int>> History(IServiceProvider Services)
        {
            var oldDb = Services.GetRequiredService<IAssetManager>();
            var tyn=TypeHelper.GetBaseClassesWithSelf(this.GetType()).Select(x=>x.Name);
            return oldDb.getDbSet<EntityHistory<int>>().Where(x => tyn.Contains(x.entityName) 
                                                                   && x.entityId.Equals(this.id)).OrderByDescending(x=> x.createdAt); //TODO has performance issue becus of derived tables

            return oldDb.getDbSet<EntityHistory<int>>().Where<EntityHistory<int>>(x => x.entityName==this.GetType().Name && x.entityId.Equals(this.id)); //TODO has error in derived tables
        }

        public object getId()
        {
            return id;
        }
        
    }

    [DefultSortAttribute<Sort>()]
    [BigTable]
    public class SendSmsHistory : AEntity
    {
        
        [StringLength(13)]
        public string PhoneNumber { get; set; }

        [MaxLength(16)]
        public byte[] IpAddress { get; set; }

        public string IpAddressString
        {
            get
            {
                var res = "";
                Array.ForEach(IpAddress, (x) => res += x + ".");
                return res.Trim('.');
            }
        }

        public DateTime SendTime { get; set; }

        public string Code { get; set; }
    }
    public partial class UserDetail
    {
        [NotMapped]
        public Guid id
        {
            get { return userId; }
        }

        [Display(Name ="نام کامل")]
        public string FullName { get{ return FirstName+" "+SurName;} }

        [Required]
        [MaxLength(200)]
        public string FirstName { get; set; }

        [Required]
        [MaxLength(200)]
        public string SurName { get; set; }

        [Key, Display(Name = "شناسه")]
        [MaxLength(450)]
        public Guid userId{ get; set; }

        [Required]
        [Range(0, 120)]
        public int RequiredMark { get; set; }

        [Required]
        public int MonthToExam { get; set; }

        //[Required]
        public string ProfileImageBase64 { get; set; }

        //[Required]
        public string Result { get; set; }

        //[Required]
        public string ResultDetail { get; set; }

        public int CityId { get; set; }


        
    }
}