// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.Design;
using System.Linq;
using System.Text.Json.Serialization;
using ClientMsgs;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

using Models.Notifications;


namespace Models
{
    public interface IUserService
    {
        //Task<User> AuthenticateSession(int userId, string sessionId, string password);
        Task<Models.User> AuthenticateSession(System.Guid userId, string sessionId, string password);




        Task<User> Authenticate(string phoneNumber, string password);
        Task<SessionMakeResult> MakeSession(User user, Platform modelPlatform);
        Task<int> removeAnothers(Guid userId);


        Task<int> logout(User userId,Guid sessId);
        Task<Models.User> getUser(Guid userId);
        Task<bool> getAcess(Guid conId,Guid usId, Guid usr2Id);
        Task<bool> getAcess(Guid usId, Guid usr2Id);
    }
    public enum UserType{
        Customer=0,
        MockThird=1,
    }
    public class SessionCacheData
    {
        public string pass;
        public DateTime lastSyncFromRedis;
        public DateTime lastUse;
    }
    public enum Lang
    {
        FA=1,
        EN=2
    }
    [BigTable]
    [Display(Name = "دانشجویان")]
    [InsertAccess(AdminUserRole.SUPER_USER)]
    [UpdateAccess(AdminUserRole.SUPER_USER)]
    [SelectAccess(AdminUserRole.SUPER_USER)]
    [ViewAccess(AdminUserRole.SUPER_USER,AdminUserRole.SUPPORT)]
    public class User : BaseUser
    {
        


        public string phoneNumber { get; set; }

        [Display(Name = "سرویس فعال")]
        public int ServiceId { get; set; }

        [Display(Name = "زمان خرید سرویس")]
        //[Column(TypeName = "datetime")]
        public DateTime? ServiceBuyTime { get; set; }

        [Display(Name = "اعتبار سرویس")]
        //[Column(TypeName = "datetime")]
        public DateTime? ServiceValidTime { get; set; }


        public UserType userType { get; set; } = UserType.Customer;

        

        public DateTime registerDate { get; set; } = DateTime.MinValue;
        
        [CustomIgnoreTag(CustomIgnoreTag.Kind.CLIENT)]
        public string pass { get; set; }


        public Guid? examinerFinder { get; set; } = null; 

        public string displayName { get; set; }
        public string firstAndLastName { get; set; }


        public bool disableZarinPalBuying { get; set; } = false;
        
        
        [Display(Name = "اعلانات")]
        [ScaffoldColumn(false)]
        [InverseProperty(nameof(UserInboxItem.Customer))]
        public  ICollection<UserInboxItem> userInboxItems { get; set; }
        


        

     
        [Display(Name = "آموزگاران")]
        [InverseProperty(nameof(UserExaminer.user))]
        [ScaffoldColumn(false)]
        public ICollection<UserExaminer> examiners { get; set; }


        [Display(Name = "دانشجویان")]
        [InverseProperty(nameof(UserExaminer.examiner))]
        [ScaffoldColumn(false)]
        public ICollection<UserExaminer> clients { get; set; }


      
        
      
        [Display(Name = "آخرین پیامک ارسال شده")]
        [ScaffoldColumn(false)]
        public DateTime? LastSmsSend { get; internal set; }
        
        public string avatar { get; set; }

       
        
        public string ?email { get; set; }

        //public string chatId { get; set; }
    }

   

  
    public class UserExaminerAcess : IQuery<UserExaminer>
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public UserExaminerAcess(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }
        public IQueryable<UserExaminer> run(IQueryable<UserExaminer> q) 
        {
            var userId=_httpContextAccessor.HttpContext.getUser2Id();
            return q.Where(x => x.examinerId == userId ||x.userId == userId );
        }
        
    }

    [InsertAccess(AdminUserRole.SUPER_USER)]
    [UpdateAccess(AdminUserRole.SUPER_USER)]
    [SelectAccess(AdminUserRole.SUPER_USER,AdminUserRole.SUPPORT)]
    [FroceFillter<UserExaminerAcess>(CustomIgnoreTag.Kind.CLIENT)]
    public class UserExaminer:IdMapper<Guid>,IRemoveable
    {
        [ForeignKey(nameof(user))]
        public Guid userId { get; set; }

        [ForeignKey(nameof(examiner))]
        public Guid examinerId { get; set; }


        [ForeignKey(nameof(userId))]
        public User user { get; set; }

        [ForeignKey(nameof(examinerId))]
        public User examiner { get; set; }

        public bool accepted { get; set; } = false;
        public bool IsRemoved { get; set; } = false;
    }

    
    

    public class UserMigrateData : IIdMapper<Guid>
    {
        public Guid id { get; set; }

        [JsonIgnore]
        [NotMapped]
        public ChangeEventList onChanges { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public DateTime date { get; set; }
        public string vrsion { get; set; }
        public string enitityName { get; set; }


        [ForeignKey(nameof(user))]
        public Guid userId { get; set; }

        [ForeignKey(nameof(userId))]
        public User user { get; set; }


        public object getId()
        {
            return id;
        }
    }
}